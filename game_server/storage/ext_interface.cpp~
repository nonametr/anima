#include "ext_interface.h"
#include "../../shared/db/mysql_database.h"

initialiseSingleton ( ExtSocket );

ExtSocket::ExtSocket ( const char* listen_address, uint32 port ) : ListenSocket(listen_address, port)
{
    uint32 server_id;
    string listen_ip;
    uint32 ext_port;
    uint32 server_type;
    Field *field;
    shared_ptr<QueryResult> qres(iDBManager->getSSDatabase()->query(DB_GET_OTHER_SERVERS_SQL__PID, iServer->getPID()));
    if (!qres.get())
        return;
    do
    {
        field = qres->fetch();
        server_id = field[0].getUInt32();
        listen_ip = field[1].getString();
        ext_port = field[2].getUInt32();
        server_type = field[3].getUInt32();
        _ext_servers[server_id] = new ExtServer(server_id, listen_ip, ext_port, server_type);
    }
    while (qres->nextRow());
}

void ExtSocket::onClientPacketDisconnect ( Socket *sock )
{
    --_conn_count;
}
void ExtSocket::onClientPacketConnect ( Socket *sock )
{
    ++_conn_count;
}
void ExtSocket::onClientPacketRead(Packet *pkt)
{
}
void ExtSocket::onClientPacketDisconnect(Socket *sock)
{
}
void ExtSocket::onClientPacketConnect(Socket *sock)
{
}
    
// ExtConnection *ExtInterface::_getFreeConnection()
// {
//     uint32 i = 0;
//     for ( ;; )
//     {
//         ExtConnection *con = &_ext_connections[ ( ( i++ ) % EXT_CONNECTIONS ) ];
//         if ( con->mutex.try_lock() )
//             return con;
//     }
// 
//     // shouldn't be reached
//     return NULL;
// }
// void ExtInterface::send(const char *send_buf, uint32 size)
// {
//     ExtConnection *connection = _getFreeConnection();
//     connection->mutex.lock();
//     if (connection->sock.isConnected())
//         connection->sock.send(send_buf, size);
//     else
//     {
//         connection->sock.connect(_listen_ip.c_str(), _ext_port);
//         connection->mutex.unlock();
//         send(send_buf, size);
//     }
//     connection->mutex.unlock();
// }

